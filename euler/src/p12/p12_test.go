/*********
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*********/

package main

import (
	"testing"
)

func Test_nthTrigNum(t *testing.T) {
	type args struct {
		n int
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		// TODO: Add test cases.
		{"1", args{1}, 1},
		{"2", args{2}, 3},
		{"3", args{4}, 10},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := nthTrigNum(tt.args.n); got != tt.want {
				t.Errorf("nthTrigNum() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_getNumOfDivisors(t *testing.T) {
	type args struct {
		n int
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		// TODO: Add test cases.
		{"1", args{1}, 1},
		{"4", args{4}, 3},
		{"28", args{28}, 6},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := getNumOfDivisors(tt.args.n); got != tt.want {
				t.Errorf("getNumOfDivisors() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_firstTrigNumWithMoreThanNDivisors(t *testing.T) {
	type args struct {
		n int
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		// TODO: Add test cases.
		{">1", args{1}, 3},
		{">2", args{2}, 6},
		{">3", args{3}, 6},

		{">5", args{5}, 28},
		{">500", args{500}, 76576500},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := firstTrigNumWithMoreThanNDivisors(tt.args.n); got != tt.want {
				t.Errorf("trigNumWithMoreThanNDivisors() = %v, want %v", got, tt.want)
			}
		})
	}
}
